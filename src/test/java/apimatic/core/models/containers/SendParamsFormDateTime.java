/*
 * TypeCombinatorSpecialLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package apimatic.core.models.containers;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import io.apimatic.core.utilities.CoreHelper;
import io.apimatic.core.utilities.DateHelper;
import io.apimatic.core.utilities.LocalDateTimeHelper;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = SendParamsFormDateTime.SendParamsFormDateTimeDeserializer.class)
public abstract class SendParamsFormDateTime {

    /**
     * One-of type initialization method.
     * @param date LocalDate value for date.
     * @return The DateCase object.
     */
    public static SendParamsFormDateTime fromDate(LocalDate date) {
        return date == null ? null : new DateCase(date);
    }

    /**
     * One-of type initialization method.
     * @param dateTime LocalDateTime value for dateTime.
     * @return The DateTimeCase object.
     */
    public static SendParamsFormDateTime fromDateTime(LocalDateTime dateTime) {
        return dateTime == null ? null : new DateTimeCase(dateTime);
    }

    /**
     * One-of type initialization method.
     * @param dateTime2 LocalDateTime value for dateTime2.
     * @return The DateTime2Case object.
     */
    public static SendParamsFormDateTime fromDateTime2(LocalDateTime dateTime2) {
        return dateTime2 == null ? null : new DateTime2Case(dateTime2);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        /**
         * @param date An instance of {@link LocalDate}
         * @return R
         */
        R date(LocalDate date);

        /**
         * @param dateTime An instance of {@link LocalDateTime}
         * @return R
         */
        R dateTime(LocalDateTime dateTime);

        /**
         * @param dateTime2 An instance of {@link LocalDateTime}
         * @return R
         */
        R dateTime2(LocalDateTime dateTime2);
    }

    /**
     * This is a implementation class for DateCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class DateCase extends SendParamsFormDateTime {

        @JsonValue
        @JsonSerialize(using = DateHelper.SimpleDateSerializer.class)
        private LocalDate date;

        DateCase(final LocalDate date) {
            this.date = date;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.date(this.date);
        }

        @JsonCreator
        private DateCase(final JsonNode jsonNode) throws IOException {
            this.date = DateHelper.fromSimpleDate(jsonNode.asText());
        }

        @Override
        public String toString() {
            return DateHelper.toSimpleDate(date);
        }
    }

    /**
     * This is a implementation class for DateTimeCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class DateTimeCase extends SendParamsFormDateTime {

        @JsonValue
        @JsonSerialize(using = LocalDateTimeHelper.UnixTimestampSerializer.class)
        private LocalDateTime dateTime;

        DateTimeCase(final LocalDateTime dateTime) {
            this.dateTime = dateTime;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.dateTime(this.dateTime);
        }

        @JsonCreator
        private DateTimeCase(final JsonNode jsonNode) throws IOException {
            this.dateTime = LocalDateTimeHelper.fromUnixTimestamp(jsonNode.asText());
        }

        @Override
        public String toString() {
            return LocalDateTimeHelper.toUnixTimestamp(dateTime);
        }
    }

    /**
     * This is a implementation class for DateTime2Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class DateTime2Case extends SendParamsFormDateTime {

        @JsonValue
        @JsonSerialize(using = LocalDateTimeHelper.Rfc8601DateTimeSerializer.class)
        private LocalDateTime dateTime2;

        DateTime2Case(final LocalDateTime dateTime2) {
            this.dateTime2 = dateTime2;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.dateTime2(this.dateTime2);
        }

        @JsonCreator
        private DateTime2Case(final JsonNode jsonNode) throws IOException {
            this.dateTime2 = LocalDateTimeHelper.fromRfc8601DateTime(jsonNode.asText());
        }

        @Override
        public String toString() {
            return LocalDateTimeHelper.toRfc8601DateTime(dateTime2);
        }
    }

    /**
     * This is a custom deserializer class for SendParamsFormDateTime.
     */
    protected static class SendParamsFormDateTimeDeserializer
            extends JsonDeserializer<SendParamsFormDateTime> {

        @Override
        public SendParamsFormDateTime deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return CoreHelper.deserialize(node,
                    Arrays.asList(DateCase.class, DateTimeCase.class, DateTime2Case.class), true);
        }
    }

}
